name: WRT-CORE

on:
  workflow_call:
    inputs:
      WRT_CONFIG:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_SSID:
        required: true
        type: string
      WRT_WORD:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_SOURCE:
        required: true
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_CONFIG: ${{inputs.WRT_CONFIG}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_SSID: ${{inputs.WRT_SSID}}
  WRT_WORD: ${{inputs.WRT_WORD}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_SOURCE: ${{inputs.WRT_SOURCE}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_TEST: ${{inputs.WRT_TEST}}

jobs:
  core:
    name: ${{inputs.WRT_SOURCE}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq purge firefox
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix python3-netifaces libfuse-dev
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /mnt/build_wrt
          sudo chown $USER:$USER /mnt/build_wrt
          sudo ln -s /mnt/build_wrt $GITHUB_WORKSPACE/wrt

      - name: Initialization Values
        run: |
          echo "WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d-%H.%M.%S")" >> $GITHUB_ENV
          echo "WRT_MARK=${GITHUB_REPOSITORY%%/*}" >> $GITHUB_ENV
          echo "WRT_INFO=${WRT_SOURCE%%/*}" >> $GITHUB_ENV
          echo "WRT_TARGET=$(grep -m 1 -oP '^CONFIG_TARGET_\K[\w]+(?=\=y)' ./Config/$WRT_CONFIG.txt)" >> $GITHUB_ENV

      - name: Verify Target
        run: |
          if [ -z "$WRT_TARGET" ]; then
            echo "错误：无法从 Config/$WRT_CONFIG.txt 提取 WRT_TARGET！请检查 CONFIG_TARGET_ 配置。"
            cat Config/$WRT_CONFIG.txt
            exit 1
          fi
          echo "WRT_TARGET=$WRT_TARGET"

      - name: Clone Code
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/
          cd ./wrt/ && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV
          PROJECT_MIRRORS_FILE="./scripts/projectsmirrors.json"
          if [ -f "$PROJECT_MIRRORS_FILE" ]; then
            sed -i '/.cn\//d; /tencent/d; /aliyun/d' "$PROJECT_MIRRORS_FILE"
          fi

      - name: Inject USB WAN Script
        run: |
          cd ./wrt/
          chmod +x $GITHUB_WORKSPACE/Scripts/usb_wan_setup.sh
          $GITHUB_WORKSPACE/Scripts/usb_wan_setup.sh

      - name: Check Scripts
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Ensure Scripts Permissions
        run: |
          chmod +x $GITHUB_WORKSPACE/Scripts/*.sh
          echo "All Scripts/*.sh now executable."

      - name: Check Caches
        id: check-cache
        if: env.WRT_TEST != 'true'
        uses: actions/cache@main
        with:
          key: ${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-${{env.WRT_HASH}}
          restore-keys: ${{env.WRT_CONFIG}}-${{env.WRT_INFO}}
          path: |
            ./wrt/.ccache
            ./wrt/staging_dir/host*
            ./wrt/staging_dir/tool*

      - name: Update Caches
        if: env.WRT_TEST != 'true'
        run: |
          if [ -d "./wrt/staging_dir" ]; then
            find "./wrt/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r DIR; do
              find "$DIR" -type f -exec touch {} +
            done
            mkdir -p ./wrt/tmp && echo "1" > ./wrt/tmp/.build
            echo "toolchain skipped done!"
          else
            echo "caches missed!"
          fi
          if ${{steps.check-cache.outputs.cache-hit != 'true'}}; then
            CACHE_LIST=$(gh cache list --key "$WRT_CONFIG-$WRT_INFO" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
              gh cache delete $CACHE_KEY
            done
            echo "caches cleanup done!"
          fi

      - name: Update Feeds
        run: |
          cd ./wrt/
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Packages
        run: |
          cd ./wrt/package/
          $GITHUB_WORKSPACE/Scripts/Packages.sh
          $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings
        run: |
          cd ./wrt/
          if [[ "${WRT_CONFIG,,}" == *"test"* ]]; then
            cat $GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt >> .config
          else
            cat $GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt $GITHUB_WORKSPACE/Config/GENERAL.txt >> .config
          fi
          $GITHUB_WORKSPACE/Scripts/Settings.sh
          make defconfig -j$(nproc) && make clean -j$(nproc)

      - name: Download Packages
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/
          make download -j$(nproc)

      - name: Compile Firmware
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/
          make -j$(nproc) || { echo "编译失败！将以单线程、详细日志模式重试..."; make -j1 V=s 2>&1 | tee compile_error.log; exit 1; }

      - name: Check Compile Output
        run: |
          cd ./wrt/
          if ! ls -la ./bin/targets/ >/dev/null 2>&1 || [ -z "$(ls -A ./bin/targets/)" ]; then
            echo "错误: bin/targets 目录不存在或为空, 请检查 'Compile Firmware' 步骤的日志。"
            exit 1
          fi
          if ! find ./bin/targets/ -type f -name "*.manifest" -print -quit | grep -q .; then
            echo "错误：未找到 .manifest 文件，请检查 'Compile Firmware' 步骤的日志。"
            exit 1
          else
            echo "找到以下 .manifest 文件内容："
            find ./bin/targets/ -type f -name "*.manifest" -exec cat {} \;
          fi

      - name: Package Firmware
        run: |
          cd ./wrt/ && mkdir ./upload/
          cp -f ./.config ./upload/Config-"$WRT_CONFIG"-"$WRT_INFO"-"$WRT_BRANCH"-"$WRT_DATE".txt
          if [[ $WRT_TEST != 'true' ]]; then
            KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - v?\K[\d\.\-rc]+' {} \; | head -n 1)
            LIST=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^luci-(app|theme)[^ ]*' {} \; | sort -u | tr '\n' ' ')
            
            if [ -z "$KVER" ]; then
              echo "错误：未能从 .manifest 文件中提取内核版本！"
              exit 1
            fi
            
            echo "WRT_KVER=$KVER" >> $GITHUB_ENV
            echo "WRT_LIST=${LIST:-none}" >> $GITHUB_ENV
            
            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|sha256sums\|packages\)$" -exec rm -rf {} +
            
            for FILE in $(find ./bin/targets/ -type f -iname "*$WRT_TARGET*"); do
              EXT=$(basename "$FILE" | cut -d '.' -f 2-)
              NAME=$(basename "$FILE" | cut -d '.' -f 1 | grep -io "\($WRT_TARGET\).*")
              
              if [ -z "$NAME" ]; then
                echo "警告：无法从 '$FILE' 中为 '$WRT_TARGET' 提取规范化名称，将使用原始文件名。"
                NAME=$(basename "$FILE" | cut -d '.' -f 1)
              fi
              
              NEW_FILE="$WRT_INFO-$WRT_BRANCH-$NAME-$WRT_DATE.$EXT"
              echo "正在重命名: $FILE -> $NEW_FILE"
              mv -f "$FILE" ./upload/"$NEW_FILE"
            done
            
            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;
            make clean -j$(nproc)
          fi

      - name: Release Firmware
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-${{env.WRT_BRANCH}}-${{env.WRT_DATE}}
          files: ./wrt/upload/*.*
          body: |
            这是个平台固件包，内含多个设备！
            请注意选择你需要的设备固件！
            不要问，刷就完事了！
            全系带开源硬件加速，别问了！
            源码：${{env.WRT_REPO}}
            分支：${{env.WRT_BRANCH}}
            提交：${{env.WRT_HASH}}
            配置：${{env.WRT_CONFIG}}
            平台：${{env.WRT_TARGET}}
            登录地址：${{env.WRT_IP}}
            登录密码：${{env.WRT_PW}}
            WIFI名称：${{env.WRT_SSID}}
            WIFI密码：${{env.WRT_WORD}}
            内核版本：${{env.WRT_KVER}}
            插件列表：${{env.WRT_LIST}}
